pico-8 cartridge // http://www.pico-8.com
version 34
__lua__
function _init()
	stage = 1

	cursor_pos_x = 1
	cursor_pos_y = 1
	info_box_y = 1

	types_of_tiles = {"drug\nstore","police\ndepartament","grocery\nstore","clothing\nstore","bar","gun store","house","gas\nstation","restaurant","flower\nshop","lake","farm","ranch","constr.\nstore"}

	types_of_jobs = {"dOCTOR", "cOP", "cOOK", "hANDYMAN", "fARMER", "lUMBERJACK"}

	types_of_perks = {
		{"sMALL STOMACH", "consumes less food daily"},
		{"sTRONG", "increased melee damage"},
		{"20/20 VISION", "greater accuracy"},
		{"sKILLED", "does stuff faster"},
		{"rESOURCEFUL", "uses less materials"},
	}

	types_of_flaws = {
		{"gLUTTON", "eats a lot"},
		{"wEAK", "less melee damage"},
		{"nEAR SIGHTED", "less accurate"},
		{"iNEPT", "takes more time to do something"},
		{"wASTEFUL", "actions consumes more materials"}
	}

	names = { "tHOMAS", "bRUCE", "dOUG", "aNNA", "mARY", "cLAIRE" }

	party_members = {}

	party_menu_option_selector = 1
	showing_party_members = false
	showing_party_inventory = false
	party_menu_inner_option = false
	party_members_showing_member_stats_idx = 0
	party_inventory = {}

	block_btns = true

	city_size_selector = 3
	board_sizes = {5, 7, 8}
	board_starting_x_by_size = {16, 8, -4}
	board = {}
	current_selected_tile = {}
	tiles_to_check = {}
	can_explore_current_selected_tile = false
	current_tile_allowed_actions = {}

	player_facing = "up"

	tile_building_size = 1
	building_main_room = 1
	
	
	room_dimensions = {
		{0, 0, 0, 0, 16, 16},
		{16, 0, 0, 0, 16, 16},
		{32, 0, 0, 0, 16, 16},
		{64, 0, 0, 0, 16, 16},
	}

	player = {}

	player.left_first_tile_to_check = 1
	player.left_second_tile_to_check = 1
	player.right_first_tile_to_check = 1
	player.right_second_tile_to_check = 1
	player.top_first_tile_to_check = 1
	player.top_second_tile_to_check = 1
	player.bottom_first_tile_to_check = 1
	player.bottom_second_tile_to_check = 1
	player.x = 32
	player.y = 100
	player.speed = 1

	player_moving = false
	player_spr = 069
	player_moving_counter = 0

	flip_x = false
	flip_y = false

	building_z = {}

	showing_current_tile_options = true
	showing_party_options = false
end

function _draw()
	cls()

	if stage == 1 then
		print("start screen", 28, 60)
		print("press any button", 24, 80)
		--[[print("choose city size", 28, 60)

		spr(064, 24, 65 + (city_size_selector * 6))
		print("small", 32, 72)
		print("medium")
		print("big")]]--
	end

	if stage == 2 then
		for i=1, count(board) do
			for k=1, count(board[i]) do
				spr(000, board[i][k].px, board[i][k].py, 2, 2)
				spr(board[i][k].spr, board[i][k].px, board[i][k].py, 2, 2)
			end
		end

		rect(1, 1, 50, 39, 11)

		if showing_current_tile_options then
			print(current_selected_tile.type, 3, 3, 7)
			size = (current_selected_tile.size == 1) and "small" or "big"
			print("sIZE: " .. size, 3, 17, 7)

			print((current_selected_tile.is_known) and "kNOWN" or "uNKNOWN", 3, 24, 7)
			if not current_selected_tile.is_known then
				can_explore = (can_explore_current_selected_tile) and "cAN EXPLORE" or "tOO FAR"
				can_explore_color = (can_explore_current_selected_tile) and 11 or 8
				print(can_explore, 3, 32, can_explore_color)
			end
		else
			if not showing_party_members and not showing_party_inventory then
				print("your group", 3, 3, 7)
				spr(064, 1, 10 + (party_menu_option_selector * 6))
				print("mEMBERS", 10, 17, 7)
				print("iNVENTORY")
				print("sTATS")
			elseif showing_party_members then
				print("members", 3, 3, 7)
				spr(064, 1, 10 + (party_menu_option_selector * 6))
				for i=1, count(party_members) do
					print(party_members[i].name, 10, 17, 7)
				end
				if party_members_showing_member_stats_idx > 0 then
					rectfill(14, 10, 64, 50, 0)
					rect(14, 10, 64, 50, 11)
					print(party_members[party_members_showing_member_stats_idx].job .. " " .. party_members[party_members_showing_member_stats_idx].name, 16, 12, 7)
					print("perks", 11)
					print(party_members[party_members_showing_member_stats_idx].perk1[1], 7)
					print(party_members[party_members_showing_member_stats_idx].perk2[1])
					print("flaw", 8)
					print(party_members[party_members_showing_member_stats_idx].flaw[1], 7)
				end
				

			elseif showing_party_inventory then
				print("inventory", 3, 3, 7)
				spr(064, 1, 10 + (party_menu_option_selector * 6))
			end
		end

		if (info_box_y <= 40) rectfill(1, info_box_y, 50, 42, 0)

		select_tile_spr = (current_selected_tile.size == 1) and 008 or 006
		spr(010, current_selected_tile.px, current_selected_tile.py, 2, 2)
		spr(select_tile_spr, current_selected_tile.px, current_selected_tile.py, 2, 2)
	end

	if stage == 3 then

		for liney=-1,16 do
			for linex=-1, 16 do
				-- rect(0 + linex * 8, 0 + (liney * 8), 8, 8, 10)
				spr(081, 0 + linex * 8, 0 + (liney * 8))
			end
		end

		map(
			room_dimensions[current_main_room][1],
			room_dimensions[current_main_room][2],
			room_dimensions[current_main_room][3],
			room_dimensions[current_main_room][4],
			room_dimensions[current_main_room][5],
			room_dimensions[current_main_room][6]
		)

		--[[
		palt(0,f)print(player.left_first_tile_to_check, 38, 44, 0)palt(t,0)
		palt(0,f)print(player.left_second_tile_to_check, 38, 50, 0)palt(t,0)

		palt(0,f)print(player.right_first_tile_to_check, 74, 44, 0)palt(t,0)
		palt(0,f)print(player.right_second_tile_to_check, 74, 50, 0)palt(t,0)

		palt(0,f)print(player.top_first_tile_to_check, 40, 26, 0)palt(t,0)
		palt(0,f)print(player.top_second_tile_to_check, 70, 26, 0)palt(t,0)
		
		palt(0,f)print(player.bottom_first_tile_to_check, 40, 62, 0)palt(t,0)
		palt(0,f)print(player.bottom_second_tile_to_check, 70, 62, 0)palt(t,0)
		]]--

		spr(player_spr, player.x, player.y, 1, 1, flip_x, flip_y)

		for z in all(building_z) do
			spr(z.spr, z.x, z.y, 1, 1, z.flip_x, z.flip_y)

			z.left_fov_max = z.x - 24
			z.left_fov = z.x - 1
			z.right_fov_max = z.x + 32
			z.right_fov = z.x + 8
			z.top_fov_max  = z.y - 24
			z.top_fov = z.y - 1
			z.down_fov_max = z.y + 32
			z.down_fov = z.y + 8

			if z.facing == "left" then
				while z.left_fov > z.left_fov_max do
					if (fget(mget_call(z.left_fov - 1, z.y), 1) == true) goto exit_right_fov
					z.left_fov -= 1
				end
				::exit_right_fov::

				--line(left_fov, z.y + 3, z.x - 1, z.y + 3, 14)
				rect(flr(z.left_fov), z.y, z.x - 1, z.y + 8, 14)
			end

			if z.facing == "right" then
				while z.right_fov < z.right_fov_max do
					if (fget(mget_call(z.right_fov + 1, z.y), 1) == true) goto exit_right_fov
					z.right_fov += 1
				end
				::exit_right_fov::

				--line(z.x + 8, z.y + 3, right_fov, z.y + 3, 12)
				rect(z.x + 8, z.y, flr(z.right_fov), z.y + 8, 12)


			end

			if z.facing == "up" then
				while z.top_fov > z.top_fov_max do
					if (fget(mget_call(z.x, z.top_fov - 1), 1) == true) goto exit_down_fov
					z.top_fov -= 1
				end
				::exit_down_fov::

				--line(z.x + 3, z.y - 1, z.x + 3, top_fov, 11)
				rect(z.x, z.y - 1, z.x + 8, flr(z.top_fov), 11)
			end

			if z.facing == "down" then
				while z.down_fov < z.down_fov_max do
					if (fget(mget_call(z.x, z.down_fov + 1), 1) == true) goto exit_down_fov
					z.down_fov += 1
				end
				::exit_down_fov::

				--line(z.x + 3, z.y + 8, z.x + 3, down_fov, 10)
				rect(z.x, z.y + 8, z.x + 8, flr(z.down_fov), 10)
			end	

			rect(z.go_to[1], z.go_to[2], z.go_to[1] + 7, z.go_to[2] + 7, 7)

			print(z.seen_player, z.x + 8, z.y, 7)
			print(z.action, z.x + 8, z.y + 8, 7)
			print(z.go_to[1] .. "," ..  z.go_to[2], z.x+8, z.y + 16, 7)
			print(z.facing, z.x+8, z.y + 24, 7)
			
			print(flr(z.x) .. "," .. flr(z.y), z.x-16, z.y, 7)
		end
	end
end

function _update()
	if stage == 1 then
		if (btnp(4) or btnp(5)) stage = 2 board_size = board_sizes[city_size_selector] cursor_pos_x = ceil(board_size/2) cursor_pos_y = ceil(board_size/2)

		--if (btnp(2) and city_size_selector > 1) city_size_selector -= 1
		--if (btnp(3) and city_size_selector < 3) city_size_selector += 1 
	end

	if stage == 2 then
		if count(board) == 0 then
			lim_y = 0
			lim_x = 0
			left_position = 0
			board_line = {}
			tile_counter = 1

			for i=1, board_size^2 do
				size = rnd({1,2})

				local tile = {}
				tile.px = board_starting_x_by_size[city_size_selector] + (lim_x * 16) + left_position
				tile.py = 44 + (lim_y * 9)
				tile.type = rnd(types_of_tiles)
				tile.size = size
				tile.spr = (size == 1) and 004 or 002
				tile.is_known = false
				tile.border_check = false
				add(board_line, tile)

				lim_x += 1
				if i % board_size == 0 then
					add(board, board_line)
					board_line = {}
					lim_y += 1
					lim_x = 0
					left_position = (left_position == 0) and 8 or 0 
				end
			end

			board[cursor_pos_y][cursor_pos_x].is_known = true
			board[cursor_pos_y][cursor_pos_x].spr = (board[cursor_pos_y][cursor_pos_x].size == 1) and 040 or 038
		end

		if count(party_members) == 0 then
			local new_guy = {}

			local types_of_perks_local = types_of_perks
			local types_of_flaws_local = types_of_flaws

			perk1_idx = flr(rnd(count(types_of_perks_local))) + 1
			perk1 = types_of_perks_local[perk1_idx]
			del(types_of_perks_local, perk1)
			del(types_of_flaws_local, types_of_flaws_local[perk1_idx])


			perk2_idx = flr(rnd(count(types_of_perks_local))) + 1
			perk2 = types_of_perks_local[perk2_idx]
			del(types_of_perks_local, perk2)
			del(types_of_flaws_local, types_of_flaws_local[perk2_idx])

			new_guy.name = rnd(names)
			new_guy.job = rnd(types_of_jobs)
			new_guy.perk1 = perk1
			new_guy.perk2 = perk2
			new_guy.flaw = rnd(types_of_flaws_local)

			add(party_members, new_guy)
		end

		if (info_box_y <= 40) info_box_y += 4

		if showing_current_tile_options then
			if (btnp(0) and cursor_pos_x > 1) cursor_pos_x -= 1 info_box_y = 1 
			if (btnp(1) and cursor_pos_x < board_size) cursor_pos_x += 1 info_box_y = 1
			if (btnp(2) and cursor_pos_y > 1) cursor_pos_y -= 1 info_box_y = 1
			if (btnp(3) and cursor_pos_y < board_size) cursor_pos_y += 1 info_box_y = 1
		else
			if btnp(1) then
				if (showing_party_members) party_members_showing_member_stats_idx = 1

				if not party_menu_inner_option then
					if (party_menu_option_selector == 1 and not party_menu_inner_option) showing_party_members = true showing_party_inventory = false party_menu_inner_option = true
					if (party_menu_option_selector == 2 and not party_menu_inner_option) showing_party_inventory = true showing_party_members = false party_menu_inner_option = true
				end
			end

			if btnp(0) then
				if showing_party_members then
					if party_members_showing_member_stats_idx > 0 then
						party_members_showing_member_stats_idx = 0
					else
						showing_party_members = false party_menu_inner_option = false
					end
				end
				if (showing_party_inventory) showing_party_inventory = false  party_menu_inner_option = false
			end 

			if (btnp(2) and party_menu_option_selector > 1) party_menu_option_selector -= 1
			if (btnp(3) and party_menu_option_selector < 2) party_menu_option_selector += 1
		end

		current_selected_tile = board[cursor_pos_y][cursor_pos_x]

		check_can_explore_current_board_tile(cursor_pos_x, cursor_pos_y)

		if (btnp(4) and can_explore_current_selected_tile) stage = 3 current_main_room = 1 -- rnd({1, 2, 3, 4}) -- current_selected_tile.is_known = true
		if (btnp(5)) showing_current_tile_options = not showing_current_tile_options showing_party_options = not showing_party_options info_box_y = 1 party_menu_option_selector = 1 party_menu_inner_option = false showing_party_inventory  = false showing_party_members = false
	end

	if stage == 3 then
		if (btn(0) and not player.left_first_tile_to_check and not player.left_second_tile_to_check) player.x -= player.speed -- 1
		if (btn(1) and not player.right_first_tile_to_check and not player.right_second_tile_to_check) player.x += player.speed -- 2
		if (btn(2) and not player.top_first_tile_to_check and not player.top_second_tile_to_check) player.y -= player.speed -- 4
		if (btn(3) and not player.bottom_first_tile_to_check and not player.bottom_second_tile_to_check) player.y += player.speed -- 8

		if (btn(0)) player_facing = "left" flip_x = false
		if (btn(1)) player_facing = "right" flip_x = true
		if (btn(2)) player_facing = "up" flip_y= false
		if (btn(3)) player_facing = "down" flip_y = true

		player_moving = (btn() != 0) and true or false

		if player_moving then
			player_moving_counter += 1
			if (player_moving_counter % 5 == 0) player_spr += 1
			if (player_facing == "left" or player_facing == "right") player_spr = (player_spr > 074) and 073 or player_spr
			if (player_facing == "up" or player_facing == "down") player_spr = (player_spr > 071) and 070 or player_spr
		else 
			player_moving_counter = 0
		end

		if count(building_z) == 0 then
			local zombie = {}
			zombie.x = 64
			zombie.y = 64
			zombie.facing = "up"
			zombie.spr = 085
			zombie.counter = 0
			zombie.action = "idle"

			zombie.left_first_tile_to_check = 1
			zombie.left_second_tile_to_check = 1
			zombie.right_first_tile_to_check = 1
			zombie.right_second_tile_to_check = 1
			zombie.top_first_tile_to_check = 1
			zombie.top_second_tile_to_check = 1
			zombie.bottom_first_tile_to_check = 1
			zombie.bottom_second_tile_to_check = 1

			zombie.left_fov_max =1
			zombie.left_fov = 1
			zombie.right_fov_max =1
			zombie.right_fov = 1
			zombie.top_fov_max  = 1
			zombie.top_fov = 1
			zombie.down_fov_max = 1
			zombie.down_fov = 1

			zombie.speed = 0.25
			zombie.seen_player = false
			zombie.go_to = {1, 1}

			add(building_z, zombie)
		end

		for z in all(building_z) do
			z.counter += 1

			if not z.seen_player then
				if (z.counter % 60 == 0) z.action = rnd({"idle", "move_left", "move_right", "move_up", "move_down"}) 

				if (z.action == "move_left" and not z.left_first_tile_to_check and not z.left_second_tile_to_check) z.x -= z.speed
				if (z.action == "move_right" and not z.right_first_tile_to_check and not z.right_second_tile_to_check) z.x += z.speed
				if (z.action == "move_up" and not z.top_first_tile_to_check and not z.top_second_tile_to_check) z.y -= z.speed
				if (z.action == "move_down" and not z.bottom_first_tile_to_check and not z.bottom_second_tile_to_check) z.y += z.speed

				if (z.action == "move_left") z.facing = "left" z.flip_x = false z.spr = 088
				if (z.action == "move_right") z.facing = "right" z.flip_x = true z.spr = 088
				if (z.action == "move_up") z.facing = "up" z.flip_y= false z.spr = 085
				if (z.action == "move_down") z.facing = "down" z.flip_y = true z.spr = 085

				if z.facing == "left" then
					if 	player.x >= flr(z.left_fov) and
						player.x <= z.x - 1 and
						player.y >= z.y - 1 and
						player.y <= z.y + 9 then
							follow_player(z)
					end
				end

				if z.facing == "right" then
					if 	player.x >= z.x + 8 and
						player.x <= flr(z.right_fov) and
						player.y >= z.y -1 and
						player.y <= z.y + 9 then
							follow_player(z)
					end
				end

				if z.facing == "up" then
					if 	player.x >= z.x and
						player.x <= z.x + 8 and
						player.y >= flr(z.top_fov) and
						player.y <= z.y - 1 then
							follow_player(z)
					end
				end

				if z.facing == "down" then
					if 	player.x >= z.x and
						player.x <= z.x + 8 and
						player.y >= z.y + 8 and
						player.y <= flr(z.down_fov) then
							follow_player(z)
					end
				end				

				z.speed = 0.25
			else 			
				z.speed = 0.75

				if z.facing == "left" then
					z.x -= z.speed
					if (z.x <= z.go_to[1]) z.action = "looking_around"
				end
				if z.facing == "right" then
					z.x += z.speed
					if (z.x >= z.go_to[1]) z.action = "looking_around"
				end
				if z.facing == "up" then
					z.y -= z.speed
					if (z.y <= z.go_to[2]) z.action = "looking_around"
				end
				if z.facing == "down" then
					z.y += z.speed
					if(z.y >= z.go_to[2]) z.action = "looking_around" 
				end

				if  z.action == "looking_around" then
					z.seen_player = false
					z.go_to = { 1, 1 }
				end
			end

			get_adjacent_entity_tiles(z)
		end

		get_adjacent_entity_tiles(player)
	end
end

function follow_player(z)
	z.seen_player = true
	z.action = "following_player"
	z.go_to = { flr(player.x / 8) * 8, flr(player.y / 8) * 8 }
end

function check_can_explore_current_board_tile(cpx, cpy)
	tiles_to_check = {}
	if cpy % 2 != 0 then
		if (cpx - 1 > 0 and cpy - 1 > 0) add(tiles_to_check, { cpx - 1, cpy - 1 })
		if (cpy - 1 > 0) add(tiles_to_check, { cpx, cpy - 1 })
		if (cpx - 1 > 0) add(tiles_to_check, { cpx - 1, cpy })
		if (cpx + 1 <= board_size) add(tiles_to_check, { cpx + 1, cpy })
		if (cpx - 1 > 0 and cpy + 1 <= board_size) add(tiles_to_check, { cpx - 1, cpy + 1 })
		if (cpy + 1 <= board_size) add(tiles_to_check, { cpx, cpy + 1 })
	else
		if (cpy - 1 > 0) add(tiles_to_check, { cpx, cpy - 1 })
		if (cpy - 1 > 0 and cpx + 1 <= board_size)  add(tiles_to_check, { cpx + 1, cpy - 1 })
		if (cpx - 1 > 0) add(tiles_to_check, { cpx - 1, cpy })
		if (cpx + 1 <= board_size) add(tiles_to_check, { cpx + 1, cpy })
		if (cpy + 1 <= board_size) add(tiles_to_check, { cpx, cpy + 1 })
		if (cpx + 1 <= board_size and cpy + 1 <= board_size) add(tiles_to_check, { cpx + 1, cpy + 1 })
	end

	if not current_selected_tile.is_known then
		for tile in all(tiles_to_check) do
			if board[tile[2]][tile[1]].is_known then 
				can_explore_current_selected_tile = true
				goto exit_fn
			else
				can_explore_current_selected_tile = false
			end
		end
	end

	::exit_fn::
end

function mget_call(position_x, position_y)
	return mget(flr((position_x) / 8) + (current_main_room - 1) * 16, flr((position_y) / 8))
end

function get_adjacent_entity_tiles(e)
	e.left_first_tile_to_check = fget(mget_call(e.x - 1, e.y), 1)
	e.left_second_tile_to_check = fget(mget_call(e.x - 1, e.y + 5), 1)

	e.right_first_tile_to_check = fget(mget_call(e.x + 7, e.y), 1)
	e.right_second_tile_to_check = fget(mget_call(e.x + 7, e.y + 5), 1)

	e.top_first_tile_to_check = fget(mget_call(e.x, e.y - 1), 1)
	e.top_second_tile_to_check = fget(mget_call(e.x + 6, e.y - 1), 1)

	e.bottom_first_tile_to_check = fget(mget_call(e.x, e.y + 7), 1)
	e.bottom_second_tile_to_check = fget(mget_call(e.x + 6, e.y + 7), 1)
end


__gfx__
0000000000000000000000066000000000000000000000000000000ff00000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000066666600000000000000000000000000ffffff000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000066666666660000000000000000000000ffffffffff0000000000000000000000000000000000000000000000000000000000000000000
000000000000000007766666666666600000000000000000077ffffffffffff00000000000000000000000000000000000000000000000000000000000000000
00000000000000000dd776666666611000000006600000000aa77ffffffff9900000000ff0000000000000000000000000000000000000000000000000000000
00000000000000000dddd7766661111000000666666000000aaaa77ffff9999000000ffffff00000000000000000000000000000000000000000000000000000
00000000000000000dddddd77111111000066666666660000aaaaaa779999990000ffffffffff000000000000000000000000000000000000000000000000000
00000005500000000ddddddd1111111007766666666667700aaaaaaa99999990077ffffffffff770000000000000000000000000000000000000000000000000
00000550055000000ddddddd111111100dd77666666771100aaaaaaa999999900aa77ffffff77990000000000000000000000000000000000000000000000000
00055000000550000ddddddd111111100dddd776677111100aaaaaaa999999900aaaa77ff7799990000000000000000000000000000000000000000000000000
05500000000005500ddddddd111111100dddddd7711111100aaaaaaa999999900aaaaaa779999990000000000000000000000000000000000000000000000000
50000000000000050ddddddd111111100ddddddd111111100aaaaaaa999999900aaaaaaa99999990000000000000000000000000000000000000000000000000
0550000000000550000ddddd11111000000ddddd11111000000aaaaa99999000000aaaaa99999000000000000000000000000000000000000000000000000000
000550000005500000000ddd1110000000000ddd1110000000000aaa9990000000000aaa99900000000000000000000000000000000000000000000000000000
00000550055000000000000d100000000000000d100000000000000a900000000000000a90000000000000000000000000000000000000000000000000000000
00000005500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000ee000000000000000000000000000000bb00000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000eeeeee00000000000000000000000000bbbbbb000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000eeeeeeeeee0000000000000000000000bbbbbbbbbb0000000000000000000000000000000000000000000000000000000000000000000
0000000000000000077eeeeeeeeeeee00000000000000000077bbbbbbbbbbbb00000000000000000000000000000000000000000000000000000000000000000
000000000000000008877eeeeeeee2200000000ee000000003377bbbbbbbb1100000000bb0000000000000000000000000000000000000000000000000000000
00000000000000000888877eeee2222000000eeeeee000000333377bbbb1111000000bbbbbb00000000000000000000000000000000000000000000000000000
00000000000000000888888772222220000eeeeeeeeee0000333333771111110000bbbbbbbbbb000000000000000000000000000000000000000000000000000
00000008800000000888888822222220077eeeeeeeeee7700333333311111110077bbbbbbbbbb770000000000000000000000000000000000000000000000000
0000088008800000088888882222222008877eeeeee77220033333331111111003377bbbbbb77110000000000000000000000000000000000000000000000000
000880000008800008888888222222200888877ee772222003333333111111100333377bb7711110000000000000000000000000000000000000000000000000
08800000000008800888888822222220088888877222222003333333111111100333333771111110000000000000000000000000000000000000000000000000
80000000000000080888888822222220088888882222222003333333111111100333333311111110000000000000000000000000000000000000000000000000
08800000000008800008888822222000000888882222200000033333111110000003333311111000000000000000000000000000000000000000000000000000
00088000000880000000088822200000000008882220000000000333111000000000033311100000000000000000000000000000000000000000000000000000
00000880088000000000000820000000000000082000000000000003100000000000000310000000000000000000000000000000000000000000000000000000
00000008800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0099000000000000000000000bbbbbb000ffff00000000000000000000000000000cc0000ffcc000000ccff00000000000000000000000000000000000000000
009a90000000000000000000b333333b00fcfc00000000000000000ff0000000000ccc00000ccc00000ccc000000000000000000000000000000000000000000
009aa9000099990000000000b333333b00ffef00000ff000000ff00ff00ff000000f4c00000f4c00000f4c000000000000000000000000000000000000000000
009aaa90009aaa9000999990b333333b00cccc00ccf44fccccf44fccccf44fcc00f4440000f4440000f444000000000000000000000000000000000000000000
009aa9000099990000000000b333333b0fccccf0cc4444cccc4444cccc4444cc00f4440000f4440000f444000000000000000000000000000000000000000000
009a90000000000000000000b333333bf0cccc0f0cc44cc0fcc44cc00cc44ccf000f4c00000f4c00000f4c000000000000000000000000000000000000000000
009900000000000000000000b333333b0010010000000000f00000000000000f000ccc00000ccc00000ccc000000000000000000000000000000000000000000
0000000000000000000000000bbbbbb000f00f00000000000000000000000000000cc000000ccff00ffcc0000000000000000000000000000000000000000000
0dddddd0444422220000000000000000000000000000000000000000000000000008800006688000000886600000000000000000000000000000000000000000
d777777d444422220000000000000000000000000000000000000006600000000008880000088800000888000000000000000000000000000000000000000000
d777777d222244440000000000000000000000000006600000066006600660000006580000065800000658000000000000000000000000000000000000000000
d777777d222244440000000000000000000000008865568888655688886556880065550000655500006555000000000000000000000000000000000000000000
d777777d444422220000000000000000000000008855558888555588885555880065550000655500006555000000000000000000000000000000000000000000
d777777d444422220000000000000000000000000885588068855880088558860006580000065800000658000000000000000000000000000000000000000000
d777777d222244440000000000000000000000000000000060000000000000060008880000088800000888000000000000000000000000000000000000000000
0dddddd0222244440000000000000000000000000000000000000000000000000008800000088660066880000000000000000000000000000000000000000000
0dddddd00dddddd00dddddd007777770077777700dddddd000000000000000000000000000000000000000000000000000000000000000000000000000000000
d7777777d777777d7777777dd777777dd777777d7777777700000000000000000000000000000000000000000000000000000000000000000000000000000000
d7777777d777777d7777777dd777777dd777777d7777777700000000000000000000000000000000000000000000000000000000000000000000000000000000
d7777777d777777d7777777dd777777dd777777d7777777700000000000000000000000000000000000000000000000000000000000000000000000000000000
d7777777d777777d7777777dd777777dd777777d7777777700000000000000000000000000000000000000000000000000000000000000000000000000000000
d7777777d777777d7777777dd777777dd777777d7777777700000000000000000000000000000000000000000000000000000000000000000000000000000000
d7777777d777777d7777777dd777777dd777777d7777777700000000000000000000000000000000000000000000000000000000000000000000000000000000
0dddddd0077777700dddddd00dddddd0077777700777777000000000000000000000000000000000000000000000000000000000000000000000000000000000
0dddddd00dddddd007777770077777700dddddd00777777007777770000000000000000000000000000000000000000000000000000000000000000000000000
d77777777777777d7777777dd777777777777777777777777777777d000000000000000000000000000000000000000000000000000000000000000000000000
d77777777777777d7777777dd777777777777777777777777777777d000000000000000000000000000000000000000000000000000000000000000000000000
d77777777777777d7777777dd777777777777777777777777777777d000000000000000000000000000000000000000000000000000000000000000000000000
d77777777777777d7777777dd777777777777777777777777777777d000000000000000000000000000000000000000000000000000000000000000000000000
d77777777777777d7777777dd777777777777777777777777777777d000000000000000000000000000000000000000000000000000000000000000000000000
d77777777777777d7777777dd777777777777777777777777777777d000000000000000000000000000000000000000000000000000000000000000000000000
07777770077777700dddddd00dddddd00dddddd00dddddd007777770000000000000000000000000000000000000000000000000000000000000000000000000
00000003300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000b33bb3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000333bb33b330000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
03b3bb3bb33b3b300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00033bb3b3bb30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000033b333000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000003300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000003300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000b3444c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0003334c7c7c40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
03b344c7ccc43b300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0004c7cc744b30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000c74433000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000003300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00007b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0007b3300007b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000bbbb0bb0b3b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000b3b3b3bbbbb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00003307b3b3b3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000420b3bbb30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00004203b30420000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00004233423420000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000342bb42b420000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
03b3423b42342b300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00033bb342bb30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000033b333000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000003300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000202020202020000000000000000000002020202020202000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
4343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4370747474747474657474747474714343000000000000000000000000000043430000000000000000000000000000434300000000000000000000000000004300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4364000000000000000000000000644343004343000000000000000000000043430043430000000000000000000000434300434300000000000000000000004300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4364000000000000000000000000644343000000000000000000000000000043430043000000000000000000000000434300434300000000000000000000004300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4364000000000000000000000000644343000000000000000000000000000043430000000000000000000000000000434300000000000000000000000000004300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4364000000000000000000000000644343000000000000000000000000000043430000000000000000000000000000434300000000000000000000000000004300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4364000000000000000000000000644343000000000000000000000000000043430000000000000000000000000000434300000000000000000000000000004300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4364000000000000000000000000644343000000000000000000000000000043430000000000000000000000000000434300000000000000000000000000004300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4373710000000000000000000000764343000000000000000000000000000043430000000000000000000000000000434300000000000000000000000000004300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4300640000000000000000000000644343000000000000000000000000000043430000000000000000000000000000434300000000000000000000000000004300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4300640000000000000000000000644343000000000000000000000000000043430000000000000000000000000000434300000000000000000000000000004300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4300640000000000000000000000644343000000000000000000000000000043430000000000000000000000000000434300000000000000000000000000004300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4300640000000000000000000000644343000000000000000000000000000043430000000000000000000000000000434300000000000000000000000000004300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4300640000000000000000000000644343000000000000000000000000000043430000000000000000000000000000434300000000000000000000000000004300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4300737474747475747474747474724343000000000000000000000000000043430000000000000000000000000000434300000000000000000000000000004300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
